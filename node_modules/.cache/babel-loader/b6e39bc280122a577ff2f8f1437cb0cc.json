{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { useMemo } from 'react';\nimport { ConfigProvider, useConfig } from './config';\nimport { BlockNumberProvider } from './blockNumber';\nimport { ChainStateProvider } from './chainState';\nimport { NotificationsProvider } from './notifications/provider';\nimport { NetworkActivator } from './NetworkActivator';\nimport { TransactionProvider } from './transactions/provider';\nimport { LocalMulticallProvider } from './LocalMulticallProvider';\nimport { NetworkProvider } from './network';\nimport { InjectedNetworkProvider } from './injectedNetwork';\nexport function DAppProvider(_ref) {\n  let {\n    config,\n    children\n  } = _ref;\n  return _jsx(ConfigProvider, Object.assign({\n    config: config\n  }, {\n    children: _jsx(DAppProviderWithConfig, {\n      children: children\n    }, void 0)\n  }), void 0);\n}\n\nconst getMulticallAddresses = networks => {\n  const result = {};\n  networks === null || networks === void 0 ? void 0 : networks.map(network => result[network.chainId] = network.multicallAddress);\n  return result;\n};\n\nfunction DAppProviderWithConfig(_ref2) {\n  let {\n    children\n  } = _ref2;\n  const {\n    multicallAddresses,\n    networks\n  } = useConfig();\n  const defaultAddresses = useMemo(() => getMulticallAddresses(networks), [networks]);\n  const multicallAddressesMerged = Object.assign(Object.assign({}, defaultAddresses), multicallAddresses);\n  return _jsx(NetworkProvider, {\n    children: _jsx(InjectedNetworkProvider, {\n      children: _jsxs(BlockNumberProvider, {\n        children: [_jsx(NetworkActivator, {}, void 0), _jsx(LocalMulticallProvider, {\n          children: _jsx(ChainStateProvider, Object.assign({\n            multicallAddresses: multicallAddressesMerged\n          }, {\n            children: _jsx(NotificationsProvider, {\n              children: _jsx(TransactionProvider, {\n                children: children\n              }, void 0)\n            }, void 0)\n          }), void 0)\n        }, void 0)]\n      }, void 0)\n    }, void 0)\n  }, void 0);\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/providers/DAppProvider.tsx"],"names":[],"mappings":";AAAA,SAAoB,OAApB,QAAmC,OAAnC;AAEA,SAAS,cAAT,EAAyB,SAAzB,QAA0C,UAA1C;AACA,SAAS,mBAAT,QAAoC,eAApC;AACA,SAAS,kBAAT,QAAmC,cAAnC;AACA,SAAS,qBAAT,QAAsC,0BAAtC;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AACA,SAAS,mBAAT,QAAoC,yBAApC;AACA,SAAS,sBAAT,QAAuC,0BAAvC;AACA,SAAS,eAAT,QAAgC,WAAhC;AACA,SAAS,uBAAT,QAAwC,mBAAxC;AAOA,OAAM,SAAU,YAAV,OAA8D;AAAA,MAAvC;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,GAAuC;AAClE,SACE,IAAA,CAAC,cAAD,EAAe,MAAA,CAAA,MAAA,CAAA;AAAC,IAAA,MAAM,EAAE;AAAT,GAAA,EAAe;AAAA,IAAA,QAAA,EAC5B,IAAA,CAAC,sBAAD,EAAuB;AAAA,MAAA,QAAA,EAAE;AAAF,KAAvB,EAAiC,KAAA,CAAjC;AAD4B,GAAf,CAAf,EAC6D,KAAA,CAD7D,CADF;AAKD;;AAMD,MAAM,qBAAqB,GAAI,QAAD,IAAkC;AAC9D,QAAM,MAAM,GAAgC,EAA5C;AACA,EAAA,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,GAAV,CAAe,OAAD,IAAc,MAAM,CAAC,OAAO,CAAC,OAAT,CAAN,GAA0B,OAAO,CAAC,gBAA9D,CAAA;AACA,SAAO,MAAP;AACD,CAJD;;AAMA,SAAS,sBAAT,QAA6D;AAAA,MAA7B;AAAE,IAAA;AAAF,GAA6B;AAC3D,QAAM;AAAE,IAAA,kBAAF;AAAsB,IAAA;AAAtB,MAAmC,SAAS,EAAlD;AACA,QAAM,gBAAgB,GAAG,OAAO,CAAC,MAAM,qBAAqB,CAAC,QAAD,CAA5B,EAAwC,CAAC,QAAD,CAAxC,CAAhC;AACA,QAAM,wBAAwB,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAQ,gBAAR,CAAA,EAA6B,kBAA7B,CAA9B;AAEA,SACE,IAAA,CAAC,eAAD,EAAgB;AAAA,IAAA,QAAA,EACd,IAAA,CAAC,uBAAD,EAAwB;AAAA,MAAA,QAAA,EACtB,KAAA,CAAC,mBAAD,EAAoB;AAAA,QAAA,QAAA,EAAA,CAClB,IAAA,CAAC,gBAAD,EAAiB,EAAjB,EAAiB,KAAA,CAAjB,CADkB,EAElB,IAAA,CAAC,sBAAD,EAAuB;AAAA,UAAA,QAAA,EACrB,IAAA,CAAC,kBAAD,EAAmB,MAAA,CAAA,MAAA,CAAA;AAAC,YAAA,kBAAkB,EAAE;AAArB,WAAA,EAA6C;AAAA,YAAA,QAAA,EAC9D,IAAA,CAAC,qBAAD,EAAsB;AAAA,cAAA,QAAA,EACpB,IAAA,CAAC,mBAAD,EAAoB;AAAA,gBAAA,QAAA,EAAE;AAAF,eAApB,EAA8B,KAAA,CAA9B;AADoB,aAAtB,EACuD,KAAA,CADvD;AAD8D,WAA7C,CAAnB,EAG0B,KAAA,CAH1B;AADqB,SAAvB,EAKuB,KAAA,CALvB,CAFkB;AAAA,OAApB,EAQ2B,KAAA,CAR3B;AADsB,KAAxB,EAUwB,KAAA,CAVxB;AADc,GAAhB,EAY4B,KAAA,CAZ5B,CADF;AAgBD","sourcesContent":["import { ReactNode, useMemo } from 'react'\nimport { Chain, Config } from '../constants'\nimport { ConfigProvider, useConfig } from './config'\nimport { BlockNumberProvider } from './blockNumber'\nimport { ChainStateProvider } from './chainState'\nimport { NotificationsProvider } from './notifications/provider'\nimport { NetworkActivator } from './NetworkActivator'\nimport { TransactionProvider } from './transactions/provider'\nimport { LocalMulticallProvider } from './LocalMulticallProvider'\nimport { NetworkProvider } from './network'\nimport { InjectedNetworkProvider } from './injectedNetwork'\n\ninterface DAppProviderProps {\n  children: ReactNode\n  config: Config\n}\n\nexport function DAppProvider({ config, children }: DAppProviderProps) {\n  return (\n    <ConfigProvider config={config}>\n      <DAppProviderWithConfig>{children}</DAppProviderWithConfig>\n    </ConfigProvider>\n  )\n}\n\ninterface WithConfigProps {\n  children: ReactNode\n}\n\nconst getMulticallAddresses = (networks: Chain[] | undefined) => {\n  const result: { [index: number]: string } = {}\n  networks?.map((network) => (result[network.chainId] = network.multicallAddress))\n  return result\n}\n\nfunction DAppProviderWithConfig({ children }: WithConfigProps) {\n  const { multicallAddresses, networks } = useConfig()\n  const defaultAddresses = useMemo(() => getMulticallAddresses(networks), [networks])\n  const multicallAddressesMerged = { ...defaultAddresses, ...multicallAddresses }\n\n  return (\n    <NetworkProvider>\n      <InjectedNetworkProvider>\n        <BlockNumberProvider>\n          <NetworkActivator />\n          <LocalMulticallProvider>\n            <ChainStateProvider multicallAddresses={multicallAddressesMerged}>\n              <NotificationsProvider>\n                <TransactionProvider>{children}</TransactionProvider>\n              </NotificationsProvider>\n            </ChainStateProvider>\n          </LocalMulticallProvider>\n        </BlockNumberProvider>\n      </InjectedNetworkProvider>\n    </NetworkProvider>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}