{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useReducer, useState } from 'react';\nimport { NetworkContext } from './context';\nimport { defaultNetworkState, networksReducer } from './reducer';\nimport { JsonRpcProvider, Web3Provider } from '@ethersproject/providers';\nimport { subscribeToProviderEvents } from '../../helpers/eip1193';\n\nasync function tryToGetAccount(provider) {\n  try {\n    return await provider.getSigner().getAddress();\n  } catch (e) {\n    if (e.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined;\n    }\n\n    throw e;\n  }\n}\n\nexport function NetworkProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState);\n  const [onUnsubscribe, setOnUnsubscribe] = useState(() => () => undefined);\n  const update = useCallback(newNetwork => {\n    dispatch({\n      type: 'UPDATE_NETWORK',\n      network: newNetwork\n    });\n  }, [network]);\n  const reportError = useCallback(error => {\n    console.error(error);\n    dispatch({\n      type: 'ADD_ERROR',\n      error\n    });\n  }, []);\n  const deactivate = useCallback(() => {\n    update({\n      accounts: []\n    });\n  }, []);\n  const onDisconnect = useCallback(error => {\n    deactivate();\n    reportError(error);\n  }, []);\n  const activate = useCallback(async provider => {\n    var _a;\n\n    const wrappedProvider = provider instanceof JsonRpcProvider ? provider : new Web3Provider(provider);\n\n    try {\n      const account = await tryToGetAccount(wrappedProvider);\n      const chainId = (_a = await wrappedProvider.getNetwork()) === null || _a === void 0 ? void 0 : _a.chainId;\n      onUnsubscribe();\n      const clearSubscriptions = subscribeToProviderEvents(wrappedProvider.provider, update, onDisconnect);\n      setOnUnsubscribe(() => clearSubscriptions);\n      update({\n        provider: wrappedProvider,\n        chainId,\n        accounts: account ? [account] : []\n      });\n    } catch (e) {\n      reportError(e);\n    }\n  }, [onUnsubscribe]);\n  return _jsx(NetworkContext.Provider, {\n    value: {\n      network,\n      update,\n      activate,\n      deactivate,\n      reportError\n    },\n    children: children\n  }, void 0);\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/providers/network/provider.tsx"],"names":[],"mappings":"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","sourcesContent":["import { ReactNode, useCallback, useReducer, useState } from 'react'\nimport { NetworkContext } from './context'\nimport { defaultNetworkState, networksReducer } from './reducer'\nimport { Network } from './model'\nimport { JsonRpcProvider, Web3Provider, ExternalProvider } from '@ethersproject/providers'\nimport { EventEmitter } from 'events'\nimport { subscribeToProviderEvents } from '../../helpers/eip1193'\n\ninterface NetworkProviderProps {\n  children: ReactNode\n}\n\nasync function tryToGetAccount(provider: JsonRpcProvider) {\n  try {\n    return await provider.getSigner().getAddress()\n  } catch (e) {\n    if (e.code === 'UNSUPPORTED_OPERATION') {\n      // readonly provider\n      return undefined\n    }\n    throw e\n  }\n}\n\nexport function NetworkProvider({ children }: NetworkProviderProps) {\n  const [network, dispatch] = useReducer(networksReducer, defaultNetworkState)\n  const [onUnsubscribe, setOnUnsubscribe] = useState<() => void>(() => () => undefined)\n\n  const update = useCallback(\n    (newNetwork: Partial<Network>) => {\n      dispatch({ type: 'UPDATE_NETWORK', network: newNetwork })\n    },\n    [network]\n  )\n\n  const reportError = useCallback((error: Error) => {\n    console.error(error)\n    dispatch({ type: 'ADD_ERROR', error })\n  }, [])\n\n  const deactivate = useCallback(() => {\n    update({\n      accounts: [],\n    })\n  }, [])\n\n  const onDisconnect = useCallback((error) => {\n    deactivate()\n    reportError(error)\n  }, [])\n\n  const activate = useCallback(\n    async (provider: JsonRpcProvider | (EventEmitter & ExternalProvider)) => {\n      const wrappedProvider = provider instanceof JsonRpcProvider ? provider : new Web3Provider(provider)\n      try {\n        const account = await tryToGetAccount(wrappedProvider)\n        const chainId = (await wrappedProvider.getNetwork())?.chainId\n        onUnsubscribe()\n        const clearSubscriptions = subscribeToProviderEvents((wrappedProvider as any).provider, update, onDisconnect)\n        setOnUnsubscribe(() => clearSubscriptions)\n        update({\n          provider: wrappedProvider,\n          chainId,\n          accounts: account ? [account] : [],\n        })\n      } catch (e) {\n        reportError(e)\n      }\n    },\n    [onUnsubscribe]\n  )\n\n  return <NetworkContext.Provider value={{ network, update, activate, deactivate, reportError }} children={children} />\n}\n"]},"metadata":{},"sourceType":"module"}