{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useFundEther = () => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // approve\n\n  const {\n    send: approveEtherSend,\n    state: approveAndFundEtherState\n  } = useContractFunction(tokenFarmContract, \"fundEth\", {\n    transactionName: \"Fund Ether\"\n  });\n\n  const approveAndFund = amount => {\n    return approveEtherSend({\n      value: utils.parseEther(amount)\n    });\n  }; // fund\n\n\n  const [state, setState] = useState(approveAndFundEtherState);\n  return {\n    approveAndFund,\n    approveAndFundEtherState\n  };\n};\n\n_s(useFundEther, \"ToSd8dC8JAnx2aGtFNmGJRPgqX8=\", false, function () {\n  return [useEthers, useContractFunction];\n});","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/src/hooks/useFundEther.tsx"],"names":["useState","useEthers","useContractFunction","constants","utils","TokenFarm","Contract","networkMapping","useFundEther","chainId","abi","tokenFarmAddress","String","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","send","approveEtherSend","state","approveAndFundEtherState","transactionName","approveAndFund","amount","value","parseEther","setState"],"mappings":";;AAAA,SAAoBA,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAC9B;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUL,SAAhB;AACA,QAAMM,gBAAgB,GAAGF,OAAO,GAAGF,cAAc,CAACK,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,WAAhC,EAA6C,CAA7C,CAAH,GAAqDN,SAAS,CAACU,WAA/F;AACA,QAAMC,kBAAkB,GAAG,IAAIV,KAAK,CAACW,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIV,QAAJ,CAAaK,gBAAb,EAA+BG,kBAA/B,CAA1B,CAR8B,CAU9B;;AACA,QAAM;AAAEG,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MACFlB,mBAAmB,CAACc,iBAAD,EAAoB,SAApB,EAA+B;AAC9CK,IAAAA,eAAe,EAAE;AAD6B,GAA/B,CADvB;;AAIA,QAAMC,cAAc,GAAIC,MAAD,IAAoB;AACvC,WAAOL,gBAAgB,CAAC;AAACM,MAAAA,KAAK,EAAEpB,KAAK,CAACqB,UAAN,CAAiBF,MAAjB;AAAR,KAAD,CAAvB;AACH,GAFD,CAf8B,CAkB9B;;;AAEA,QAAM,CAACJ,KAAD,EAAQO,QAAR,IAAoB1B,QAAQ,CAACoB,wBAAD,CAAlC;AAEA,SAAO;AAAEE,IAAAA,cAAF;AAAkBF,IAAAA;AAAlB,GAAP;AACH,CAvBM;;GAAMZ,Y;UAIWP,S,EAQhBC,mB","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useFundEther = () => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // approve\n    const { send: approveEtherSend, state: approveAndFundEtherState } =\n        useContractFunction(tokenFarmContract, \"fundEth\", {\n            transactionName: \"Fund Ether\",\n        })\n    const approveAndFund = (amount: string) => {\n        return approveEtherSend({value: utils.parseEther(amount)})\n    }\n    // fund\n    \n    const [state, setState] = useState(approveAndFundEtherState)\n\n    return { approveAndFund, approveAndFundEtherState }\n}"]},"metadata":{},"sourceType":"module"}