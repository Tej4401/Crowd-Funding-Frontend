{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport { constants, utils } from \"ethers\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\nexport const useFundTokens = tokenAddress => {\n  _s();\n\n  // address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero;\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); // approve\n\n  const {\n    send: approveErc20Send,\n    state: approveAndFundErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 transfer\"\n  });\n\n  const approveAndFund = amount => {\n    setAmountToFund(amount);\n    return approveErc20Send(tokenFarmAddress, amount);\n  }; // fund\n\n\n  const {\n    send: fundSend,\n    state: fundState\n  } = useContractFunction(tokenFarmContract, \"fundTokens\", {\n    transactionName: \"Fund Tokens\"\n  });\n  const [amountToFund, setAmountToFund] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndFundErc20State.status === \"Success\") {\n      fundSend(amountToFund, tokenAddress);\n    }\n  }, [approveAndFundErc20State, amountToFund, tokenAddress]);\n  const [state, setState] = useState(approveAndFundErc20State);\n  useEffect(() => {\n    if (approveAndFundErc20State.status === \"Success\") {\n      setState(fundState);\n    } else {\n      setState(approveAndFundErc20State);\n    }\n  }, [approveAndFundErc20State, fundState]);\n  return {\n    approveAndFund,\n    state\n  };\n};\n\n_s(useFundTokens, \"t+ssLt3RM0cezcgilH/xNg849ag=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/src/hooks/useFundTokens.tsx"],"names":["useEffect","useState","useEthers","useContractFunction","constants","utils","TokenFarm","ERC20","Contract","networkMapping","useFundTokens","tokenAddress","chainId","abi","tokenFarmAddress","String","AddressZero","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndFundErc20State","transactionName","approveAndFund","amount","setAmountToFund","fundSend","fundState","amountToFund","status","setState"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,QAAjC;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,oCAA3B;AAEA,OAAO,MAAMC,aAAa,GAAIC,YAAD,IAA0B;AAAA;;AACnD;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcV,SAAS,EAA7B;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAUP,SAAhB;AACA,QAAMQ,gBAAgB,GAAGF,OAAO,GAAGH,cAAc,CAACM,MAAM,CAACH,OAAD,CAAP,CAAd,CAAgC,WAAhC,EAA6C,CAA7C,CAAH,GAAqDR,SAAS,CAACY,WAA/F;AACA,QAAMC,kBAAkB,GAAG,IAAIZ,KAAK,CAACa,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIX,QAAJ,CAAaM,gBAAb,EAA+BG,kBAA/B,CAA1B;AAEA,QAAMG,QAAQ,GAAGb,KAAK,CAACM,GAAvB;AACA,QAAMQ,cAAc,GAAG,IAAIhB,KAAK,CAACa,SAAV,CAAoBE,QAApB,CAAvB;AACA,QAAME,aAAa,GAAG,IAAId,QAAJ,CAAaG,YAAb,EAA2BU,cAA3B,CAAtB,CAZmD,CAanD;;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MACFvB,mBAAmB,CAACmB,aAAD,EAAgB,SAAhB,EAA2B;AAC1CK,IAAAA,eAAe,EAAE;AADyB,GAA3B,CADvB;;AAIA,QAAMC,cAAc,GAAIC,MAAD,IAAoB;AACvCC,IAAAA,eAAe,CAACD,MAAD,CAAf;AACA,WAAOL,gBAAgB,CAACV,gBAAD,EAAmBe,MAAnB,CAAvB;AACH,GAHD,CAlBmD,CAsBnD;;;AACA,QAAM;AAAEN,IAAAA,IAAI,EAAEQ,QAAR;AAAkBN,IAAAA,KAAK,EAAEO;AAAzB,MACF7B,mBAAmB,CAACgB,iBAAD,EAAoB,YAApB,EAAkC;AACjDQ,IAAAA,eAAe,EAAE;AADgC,GAAlC,CADvB;AAIA,QAAM,CAACM,YAAD,EAAeH,eAAf,IAAkC7B,QAAQ,CAAC,GAAD,CAAhD,CA3BmD,CA6BnD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,wBAAwB,CAACQ,MAAzB,KAAoC,SAAxC,EAAmD;AAC/CH,MAAAA,QAAQ,CAACE,YAAD,EAAetB,YAAf,CAAR;AACH;AACJ,GAJQ,EAIN,CAACe,wBAAD,EAA2BO,YAA3B,EAAyCtB,YAAzC,CAJM,CAAT;AAOA,QAAM,CAACc,KAAD,EAAQU,QAAR,IAAoBlC,QAAQ,CAACyB,wBAAD,CAAlC;AAEA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI0B,wBAAwB,CAACQ,MAAzB,KAAoC,SAAxC,EAAmD;AAC/CC,MAAAA,QAAQ,CAACH,SAAD,CAAR;AACH,KAFD,MAEO;AACHG,MAAAA,QAAQ,CAACT,wBAAD,CAAR;AACH;AACJ,GANQ,EAMN,CAACA,wBAAD,EAA2BM,SAA3B,CANM,CAAT;AAQA,SAAO;AAAEJ,IAAAA,cAAF;AAAkBH,IAAAA;AAAlB,GAAP;AACH,CAhDM;;GAAMf,a;UAIWR,S,EAWhBC,mB,EASAA,mB","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport { constants, utils } from \"ethers\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n\nexport const useFundTokens = (tokenAddress: string) => {\n    // address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n    const tokenFarmAddress = chainId ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n    // approve\n    const { send: approveErc20Send, state: approveAndFundErc20State } =\n        useContractFunction(erc20Contract, \"approve\", {\n            transactionName: \"Approve ERC20 transfer\",\n        })\n    const approveAndFund = (amount: string) => {\n        setAmountToFund(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n    // fund\n    const { send: fundSend, state: fundState } =\n        useContractFunction(tokenFarmContract, \"fundTokens\", {\n            transactionName: \"Fund Tokens\",\n        })\n    const [amountToFund, setAmountToFund] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndFundErc20State.status === \"Success\") {\n            fundSend(amountToFund, tokenAddress)\n        }\n    }, [approveAndFundErc20State, amountToFund, tokenAddress])\n\n\n    const [state, setState] = useState(approveAndFundErc20State)\n\n    useEffect(() => {\n        if (approveAndFundErc20State.status === \"Success\") {\n            setState(fundState)\n        } else {\n            setState(approveAndFundErc20State)\n        }\n    }, [approveAndFundErc20State, fundState])\n\n    return { approveAndFund, state }\n}"]},"metadata":{},"sourceType":"module"}