{"ast":null,"code":"var _jsxFileName = \"/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/src/components/yourWallet/EthFundFrom.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useEthers, useEtherBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { useFundEther } from \"../../hooks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const EthFundForm = () => {\n  _s();\n\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useEtherBalance(account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const {\n    notifications\n  } = useNotifications();\n  const [amount, setAmount] = useState(0);\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndFund,\n    approveAndFundEtherState\n  } = useFundEther();\n\n  const handleFundSubmit = () => {\n    return approveAndFund(amount.toString());\n  };\n\n  const isMining = approveAndFundEtherState.status === \"Mining\";\n  const [showFundEtherSuccess, setShowFundEtherSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowFundEtherSuccess(false);\n  };\n\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Fund Ether\").length > 0) {\n      setShowFundEtherSuccess(true);\n    }\n  }, [notifications, showFundEtherSuccess]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleFundSubmit,\n        color: \"primary\",\n        size: \"large\",\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }, this) : \"Fund!!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showFundEtherSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Ether Fundd!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(EthFundForm, \"giIZ7U3Jvz6xtW0c9AdWjMRd8kQ=\", false, function () {\n  return [useEthers, useEtherBalance, useNotifications, useFundEther];\n});\n\n_c = EthFundForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthFundForm\");","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/src/components/yourWallet/EthFundFrom.tsx"],"names":["React","useState","useEffect","useEthers","useEtherBalance","useNotifications","formatUnits","Button","Input","CircularProgress","Snackbar","Alert","useFundEther","EthFundForm","account","tokenBalance","formattedTokenBalance","parseFloat","notifications","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndFund","approveAndFundEtherState","handleFundSubmit","toString","isMining","status","showFundEtherSuccess","setShowFundEtherSuccess","handleCloseSnack","filter","notification","type","transactionName","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,gBAArC,QAA6D,eAA7D;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,gBAAxB,EAA0CC,QAA1C,QAA0D,mBAA1D;AACA,OAAOC,KAAP,MAAkB,wBAAlB;AACA,SAASC,YAAT,QAA6B,aAA7B;;;AAGA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAcX,SAAS,EAA7B;AACA,QAAMY,YAAY,GAAGX,eAAe,CAACU,OAAD,CAApC;AACA,QAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACX,WAAW,CAACS,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;AACA,QAAM;AAAEG,IAAAA;AAAF,MAAoBb,gBAAgB,EAA1C;AAEA,QAAM,CAACc,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAA2C,CAA3C,CAApC;;AACA,QAAMoB,iBAAiB,GAAIC,KAAD,IAAgD;AACtE,UAAMC,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAAb,KAAuB,EAAvB,GAA4B,EAA5B,GAAiCC,MAAM,CAACJ,KAAK,CAACE,MAAN,CAAaC,KAAd,CAAzD;AACAL,IAAAA,SAAS,CAACG,SAAD,CAAT;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACH,GAJD;;AAMA,QAAM;AAAEM,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAA+ClB,YAAY,EAAjE;;AACA,QAAMmB,gBAAgB,GAAG,MAAM;AAC3B,WAAOF,cAAc,CAACV,MAAM,CAACa,QAAP,EAAD,CAArB;AACH,GAFD;;AAGA,QAAMC,QAAQ,GAAGH,wBAAwB,CAACI,MAAzB,KAAoC,QAArD;AACA,QAAM,CAACC,oBAAD,EAAuBC,uBAAvB,IAAkDnC,QAAQ,CAAC,KAAD,CAAhE;;AACA,QAAMoC,gBAAgB,GAAG,MAAM;AAC3BD,IAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH,GAFD;;AAIAlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,aAAa,CAACoB,MAAd,CACCC,YAAD,IACIA,YAAY,CAACC,IAAb,KAAsB,oBAAtB,IACAD,YAAY,CAACE,eAAb,KAAiC,YAHrC,EAIFC,MAJE,GAIO,CAJX,EAIc;AACVN,MAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACH;AACJ,GARQ,EAQN,CAAClB,aAAD,EAAgBiB,oBAAhB,CARM,CAAT;AAUA,sBACI;AAAA,4BACI;AAAA,8BACI,QAAC,KAAD;AACI,QAAA,QAAQ,EAAEd;AADd;AAAA;AAAA;AAAA;AAAA,cADJ,eAGI,QAAC,MAAD;AACI,QAAA,OAAO,EAAEU,gBADb;AAEI,QAAA,KAAK,EAAC,SAFV;AAGI,QAAA,IAAI,EAAC,OAHT;AAAA,kBAIKE,QAAQ,gBAAG,QAAC,gBAAD;AAAkB,UAAA,IAAI,EAAE;AAAxB;AAAA;AAAA;AAAA;AAAA,gBAAH,GAAoC;AAJjD;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAWI,QAAC,QAAD;AACI,MAAA,IAAI,EAAEE,oBADV;AAEI,MAAA,gBAAgB,EAAE,IAFtB;AAGI,MAAA,OAAO,EAAEE,gBAHb;AAAA,6BAII,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEA,gBAAhB;AAAkC,QAAA,QAAQ,EAAC,SAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,YAXJ;AAAA,kBADJ;AAsBH,CAvDM;;GAAMxB,W;UACWV,S,EACCC,e,EAEKC,gB,EAS2BO,Y;;;KAb5CC,W","sourcesContent":["import React, { useState, useEffect } from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useEtherBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, Input, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useFundEther } from \"../../hooks\"\nimport { utils } from \"ethers\"\n\nexport const EthFundForm = () => {\n    const { account } = useEthers()\n    const tokenBalance = useEtherBalance(account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const { notifications } = useNotifications()\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndFund, approveAndFundEtherState } = useFundEther()\n    const handleFundSubmit = () => {\n        return approveAndFund(amount.toString())\n    }\n    const isMining = approveAndFundEtherState.status === \"Mining\"\n    const [showFundEtherSuccess, setShowFundEtherSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowFundEtherSuccess(false)\n    }\n\n    useEffect(() => {\n        if (notifications.filter(\n            (notification) =>\n                notification.type === \"transactionSucceed\" &&\n                notification.transactionName === \"Fund Ether\"\n        ).length > 0) {\n            setShowFundEtherSuccess(true)\n        }\n    }, [notifications, showFundEtherSuccess])\n\n    return (\n        <>\n            <div>\n                <Input\n                    onChange={handleInputChange} />\n                <Button\n                    onClick={handleFundSubmit}\n                    color=\"primary\"\n                    size=\"large\">\n                    {isMining ? <CircularProgress size={26} /> : \"Fund!!!\"}\n                </Button>\n            </div>\n            <Snackbar\n                open={showFundEtherSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack}>\n                <Alert onClose={handleCloseSnack} severity=\"success\">\n                    Ether Fundd!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}