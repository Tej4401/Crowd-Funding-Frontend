{"ast":null,"code":"import { Contract } from '@ethersproject/contracts';\nconst ABI = ['function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool requireSuccess, bytes returnData)[])'];\nexport async function multicall2(provider, address, blockNumber, requests) {\n  var _a;\n\n  if (requests.length === 0) {\n    return {};\n  }\n\n  const contract = new Contract(address, ABI, provider);\n  const results = await contract.tryAggregate(false, requests.map(_ref => {\n    let {\n      address,\n      data\n    } = _ref;\n    return [address, data];\n  }), {\n    blockTag: blockNumber\n  });\n  const state = {};\n\n  for (let i = 0; i < requests.length; i++) {\n    const {\n      address,\n      data\n    } = requests[i];\n    const [, result] = results[i];\n    const stateForAddress = (_a = state[address]) !== null && _a !== void 0 ? _a : {};\n    stateForAddress[data] = result;\n    state[address] = stateForAddress;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/providers/chainState/multicall2.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,0BAAzB;AAKA,MAAM,GAAG,GAAG,CACV,gKADU,CAAZ;AAIA,OAAO,eAAe,UAAf,CACL,QADK,EAEL,OAFK,EAGL,WAHK,EAIL,QAJK,EAIgB;;;AAErB,MAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,WAAO,EAAP;AACD;;AACD,QAAM,QAAQ,GAAG,IAAI,QAAJ,CAAa,OAAb,EAAsB,GAAtB,EAA2B,QAA3B,CAAjB;AACA,QAAM,OAAO,GAAwB,MAAM,QAAQ,CAAC,YAAT,CACzC,KADyC,EAEzC,QAAQ,CAAC,GAAT,CAAa;AAAA,QAAC;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,KAAD;AAAA,WAAuB,CAAC,OAAD,EAAU,IAAV,CAAvB;AAAA,GAAb,CAFyC,EAGzC;AAAE,IAAA,QAAQ,EAAE;AAAZ,GAHyC,CAA3C;AAKA,QAAM,KAAK,GAAe,EAA1B;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,UAAM;AAAE,MAAA,OAAF;AAAW,MAAA;AAAX,QAAoB,QAAQ,CAAC,CAAD,CAAlC;AACA,UAAM,GAAG,MAAH,IAAa,OAAO,CAAC,CAAD,CAA1B;AACA,UAAM,eAAe,GAAA,CAAA,EAAA,GAAG,KAAK,CAAC,OAAD,CAAR,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,EAAjB,GAAqB,EAA1C;AACA,IAAA,eAAe,CAAC,IAAD,CAAf,GAAwB,MAAxB;AACA,IAAA,KAAK,CAAC,OAAD,CAAL,GAAiB,eAAjB;AACD;;AACD,SAAO,KAAP;AACD","sourcesContent":["import { Contract } from '@ethersproject/contracts'\nimport { Provider } from '@ethersproject/providers'\nimport { ChainCall } from './callsReducer'\nimport { ChainState } from './model'\n\nconst ABI = [\n  'function tryAggregate(bool requireSuccess, tuple(address target, bytes callData)[] calls) public view returns (tuple(bool requireSuccess, bytes returnData)[])',\n]\n\nexport async function multicall2(\n  provider: Provider,\n  address: string,\n  blockNumber: number,\n  requests: ChainCall[]\n): Promise<ChainState> {\n  if (requests.length === 0) {\n    return {}\n  }\n  const contract = new Contract(address, ABI, provider)\n  const results: [boolean, string][] = await contract.tryAggregate(\n    false,\n    requests.map(({ address, data }) => [address, data]),\n    { blockTag: blockNumber }\n  )\n  const state: ChainState = {}\n  for (let i = 0; i < requests.length; i++) {\n    const { address, data } = requests[i]\n    const [, result] = results[i]\n    const stateForAddress = state[address] ?? {}\n    stateForAddress[data] = result\n    state[address] = stateForAddress\n  }\n  return state\n}\n"]},"metadata":{},"sourceType":"module"}