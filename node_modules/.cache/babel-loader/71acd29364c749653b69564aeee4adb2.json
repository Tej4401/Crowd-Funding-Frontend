{"ast":null,"code":"import { useEthers } from './useEthers';\nimport { usePromiseTransaction } from './usePromiseTransaction';\nexport function useSendTransaction(options) {\n  const {\n    library,\n    chainId\n  } = useEthers();\n  const {\n    promiseTransaction,\n    state,\n    resetState\n  } = usePromiseTransaction(chainId, options);\n\n  const sendTransaction = async transactionRequest => {\n    const signer = (options === null || options === void 0 ? void 0 : options.signer) || (library === null || library === void 0 ? void 0 : library.getSigner());\n\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest));\n    }\n  };\n\n  return {\n    sendTransaction,\n    state,\n    resetState\n  };\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/hooks/useSendTransaction.ts"],"names":[],"mappings":"AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,qBAAT,QAAsC,yBAAtC;AAEA,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAAyD;AAC7D,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAuB,SAAS,EAAtC;AACA,QAAM;AAAE,IAAA,kBAAF;AAAsB,IAAA,KAAtB;AAA6B,IAAA;AAA7B,MAA4C,qBAAqB,CAAC,OAAD,EAAU,OAAV,CAAvE;;AAEA,QAAM,eAAe,GAAG,MAAO,kBAAP,IAAiD;AACvE,UAAM,MAAM,GAAG,CAAA,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,MAAT,MAAmB,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,SAAT,EAAnB,CAAf;;AACA,QAAI,MAAJ,EAAY;AACV,YAAM,kBAAkB,CAAC,MAAM,CAAC,eAAP,CAAuB,kBAAvB,CAAD,CAAxB;AACD;AACF,GALD;;AAOA,SAAO;AAAE,IAAA,eAAF;AAAmB,IAAA,KAAnB;AAA0B,IAAA;AAA1B,GAAP;AACD","sourcesContent":["import { TransactionRequest } from '@ethersproject/abstract-provider'\nimport { TransactionOptions } from '../../src'\nimport { useEthers } from './useEthers'\nimport { usePromiseTransaction } from './usePromiseTransaction'\n\nexport function useSendTransaction(options?: TransactionOptions) {\n  const { library, chainId } = useEthers()\n  const { promiseTransaction, state, resetState } = usePromiseTransaction(chainId, options)\n\n  const sendTransaction = async (transactionRequest: TransactionRequest) => {\n    const signer = options?.signer || library?.getSigner()\n    if (signer) {\n      await promiseTransaction(signer.sendTransaction(transactionRequest))\n    }\n  }\n\n  return { sendTransaction, state, resetState }\n}\n"]},"metadata":{},"sourceType":"module"}