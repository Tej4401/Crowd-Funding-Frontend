{"ast":null,"code":"import { useCallback } from 'react';\nimport { useInjectedNetwork, useNetwork } from '../providers';\nexport function useEthers() {\n  const {\n    network: {\n      provider,\n      chainId,\n      accounts,\n      errors\n    },\n    deactivate,\n    activate\n  } = useNetwork();\n  const {\n    injectedProvider,\n    connect\n  } = useInjectedNetwork();\n  const result = {\n    connector: undefined,\n    library: provider,\n    chainId,\n    account: accounts[0],\n    active: !!provider,\n    activate: async providerOrConnector => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.');\n        await providerOrConnector.activate();\n        return activate(await providerOrConnector.getProvider());\n      }\n\n      return activate(providerOrConnector);\n    },\n    deactivate,\n    setError: () => {\n      throw new Error('setError is deprecated');\n    },\n    error: errors[errors.length - 1]\n  };\n  const activateBrowserWallet = useCallback(async () => {\n    if (!injectedProvider) {\n      return;\n    }\n\n    await connect();\n    await result.activate(injectedProvider);\n  }, [injectedProvider]);\n  return Object.assign(Object.assign({}, result), {\n    activateBrowserWallet\n  });\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/hooks/useEthers.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,OAA5B;AAGA,SAAS,kBAAT,EAA6B,UAA7B,QAA+C,cAA/C;AAqBA,OAAM,SAAU,SAAV,GAAmB;AACvB,QAAM;AACJ,IAAA,OAAO,EAAE;AAAE,MAAA,QAAF;AAAY,MAAA,OAAZ;AAAqB,MAAA,QAArB;AAA+B,MAAA;AAA/B,KADL;AAEJ,IAAA,UAFI;AAGJ,IAAA;AAHI,MAIF,UAAU,EAJd;AAKA,QAAM;AAAE,IAAA,gBAAF;AAAoB,IAAA;AAApB,MAAgC,kBAAkB,EAAxD;AAEA,QAAM,MAAM,GAAG;AACb,IAAA,SAAS,EAAE,SADE;AAEb,IAAA,OAAO,EAAE,QAFI;AAGb,IAAA,OAHa;AAIb,IAAA,OAAO,EAAE,QAAQ,CAAC,CAAD,CAJJ;AAKb,IAAA,MAAM,EAAE,CAAC,CAAC,QALG;AAMb,IAAA,QAAQ,EAAE,MAAO,mBAAP,IAAkD;AAC1D,UAAI,iBAAiB,mBAArB,EAA0C;AACxC,QAAA,OAAO,CAAC,IAAR,CAAa,gFAAb;AACA,cAAM,mBAAmB,CAAC,QAApB,EAAN;AACA,eAAO,QAAQ,CAAC,MAAM,mBAAmB,CAAC,WAApB,EAAP,CAAf;AACD;;AACD,aAAO,QAAQ,CAAC,mBAAD,CAAf;AACD,KAbY;AAcb,IAAA,UAda;AAgBb,IAAA,QAAQ,EAAE,MAAK;AACb,YAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD,KAlBY;AAoBb,IAAA,KAAK,EAAE,MAAM,CAAC,MAAM,CAAC,MAAP,GAAgB,CAAjB;AApBA,GAAf;AAuBA,QAAM,qBAAqB,GAAG,WAAW,CAAC,YAAW;AACnD,QAAI,CAAC,gBAAL,EAAuB;AACrB;AACD;;AACD,UAAM,OAAO,EAAb;AACA,UAAM,MAAM,CAAC,QAAP,CAAgB,gBAAhB,CAAN;AACD,GANwC,EAMtC,CAAC,gBAAD,CANsC,CAAzC;AAQA,SAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,MAAZ,CAAA,EAAkB;AAAE,IAAA;AAAF,GAAlB,CAAA;AACD","sourcesContent":["import { useCallback } from 'react'\nimport { JsonRpcProvider } from '@ethersproject/providers'\nimport { ChainId } from '../constants'\nimport { useInjectedNetwork, useNetwork } from '../providers'\nimport { EventEmitter } from 'events'\n\ntype SupportedProviders =\n  | JsonRpcProvider\n  | EventEmitter\n  | { getProvider: () => JsonRpcProvider | EventEmitter; activate: () => Promise<void> }\n\nexport type Web3Ethers = {\n  activate: (provider: SupportedProviders) => Promise<void>\n  setError: (error: Error) => void\n  deactivate: () => void\n  connector: undefined\n  chainId?: ChainId\n  account?: null | string\n  error?: Error\n  library?: JsonRpcProvider\n  active: boolean\n  activateBrowserWallet: () => void\n}\n\nexport function useEthers(): Web3Ethers {\n  const {\n    network: { provider, chainId, accounts, errors },\n    deactivate,\n    activate,\n  } = useNetwork()\n  const { injectedProvider, connect } = useInjectedNetwork()\n\n  const result = {\n    connector: undefined,\n    library: provider,\n    chainId,\n    account: accounts[0],\n    active: !!provider,\n    activate: async (providerOrConnector: SupportedProviders) => {\n      if ('getProvider' in providerOrConnector) {\n        console.warn('Using web3-react connectors is deprecated and may lead to unexpected behavior.')\n        await providerOrConnector.activate()\n        return activate(await providerOrConnector.getProvider())\n      }\n      return activate(providerOrConnector)\n    },\n    deactivate,\n\n    setError: () => {\n      throw new Error('setError is deprecated')\n    },\n\n    error: errors[errors.length - 1],\n  }\n\n  const activateBrowserWallet = useCallback(async () => {\n    if (!injectedProvider) {\n      return\n    }\n    await connect()\n    await result.activate(injectedProvider)\n  }, [injectedProvider])\n\n  return { ...result, activateBrowserWallet }\n}\n"]},"metadata":{},"sourceType":"module"}