{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useCallback, useEffect, useState } from 'react';\nimport { InjectedNetworkContext } from './context';\nimport { getInjectedProvider } from '../../helpers/injectedProvider';\nimport { useNetwork } from '../network';\nimport { useConfig } from '../config';\nexport function InjectedNetworkProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const {\n    reportError\n  } = useNetwork();\n  const {\n    pollingInterval\n  } = useConfig();\n  const [injectedProvider, setInjectedProvider] = useState();\n  useEffect(function () {\n    getInjectedProvider(pollingInterval).then(setInjectedProvider);\n  }, []);\n  const connect = useCallback(async () => {\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'));\n      return;\n    }\n\n    try {\n      await injectedProvider.send('eth_requestAccounts', []);\n      return injectedProvider;\n    } catch (e) {\n      reportError(e);\n    }\n  }, [injectedProvider]);\n  return _jsx(InjectedNetworkContext.Provider, {\n    value: {\n      injectedProvider,\n      connect\n    },\n    children: children\n  }, void 0);\n}","map":{"version":3,"sources":["/home/albert/Downloads/Crowd_funding-app-using-brownie-and-react/front_end/node_modules/@usedapp/core/src/providers/injectedNetwork/provider.tsx"],"names":[],"mappings":";AAAA,SAAoB,WAApB,EAAiC,SAAjC,EAA4C,QAA5C,QAA4D,OAA5D;AACA,SAAS,sBAAT,QAAuC,WAAvC;AAEA,SAAS,mBAAT,QAAoC,gCAApC;AACA,SAAS,UAAT,QAA2B,YAA3B;AACA,SAAS,SAAT,QAA0B,WAA1B;AAMA,OAAM,SAAU,uBAAV,OAA4E;AAAA,MAA1C;AAAE,IAAA;AAAF,GAA0C;AAChF,QAAM;AAAE,IAAA;AAAF,MAAkB,UAAU,EAAlC;AACA,QAAM;AAAE,IAAA;AAAF,MAAsB,SAAS,EAArC;AACA,QAAM,CAAC,gBAAD,EAAmB,mBAAnB,IAA0C,QAAQ,EAAxD;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,mBAAmB,CAAC,eAAD,CAAnB,CAAqC,IAArC,CAA0C,mBAA1C;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,QAAM,OAAO,GAAG,WAAW,CAAC,YAAW;AACrC,QAAI,CAAC,gBAAL,EAAuB;AACrB,MAAA,WAAW,CAAC,IAAI,KAAJ,CAAU,gCAAV,CAAD,CAAX;AACA;AACD;;AACD,QAAI;AACF,YAAM,gBAAgB,CAAC,IAAjB,CAAsB,qBAAtB,EAA6C,EAA7C,CAAN;AACA,aAAO,gBAAP;AACD,KAHD,CAGE,OAAO,CAAP,EAAU;AACV,MAAA,WAAW,CAAC,CAAD,CAAX;AACD;AACF,GAX0B,EAWxB,CAAC,gBAAD,CAXwB,CAA3B;AAaA,SACE,IAAA,CAAC,sBAAsB,CAAC,QAAxB,EAAgC;AAC9B,IAAA,KAAK,EAAE;AACL,MAAA,gBADK;AAEL,MAAA;AAFK,KADuB;AAK9B,IAAA,QAAQ,EAAE;AALoB,GAAhC,EAKoB,KAAA,CALpB,CADF;AASD","sourcesContent":["import { ReactNode, useCallback, useEffect, useState } from 'react'\nimport { InjectedNetworkContext } from './context'\nimport { Web3Provider } from '@ethersproject/providers'\nimport { getInjectedProvider } from '../../helpers/injectedProvider'\nimport { useNetwork } from '../network'\nimport { useConfig } from '../config'\n\ninterface InjectedNetworkProviderProps {\n  children: ReactNode\n}\n\nexport function InjectedNetworkProvider({ children }: InjectedNetworkProviderProps) {\n  const { reportError } = useNetwork()\n  const { pollingInterval } = useConfig()\n  const [injectedProvider, setInjectedProvider] = useState<Web3Provider | undefined>()\n\n  useEffect(function () {\n    getInjectedProvider(pollingInterval).then(setInjectedProvider)\n  }, [])\n\n  const connect = useCallback(async () => {\n    if (!injectedProvider) {\n      reportError(new Error('No injected provider available'))\n      return\n    }\n    try {\n      await injectedProvider.send('eth_requestAccounts', [])\n      return injectedProvider\n    } catch (e) {\n      reportError(e)\n    }\n  }, [injectedProvider])\n\n  return (\n    <InjectedNetworkContext.Provider\n      value={{\n        injectedProvider,\n        connect,\n      }}\n      children={children}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}